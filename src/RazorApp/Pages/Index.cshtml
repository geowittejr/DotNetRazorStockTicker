@page
@model IndexModel
@{
    ViewData["Title"] = "U.S. Market Watch";
}
<h1 id="pageTitle">U.S. Market Watch</h1>

<form id="quotesForm" method="post" asp-page-handler="GetStockTickers" role="search" aria-labelledby="formLabel">
    <div class="form-group">
        <label id="formLabel" for="symbols">Enter stock symbols (space-separated):</label>
        <div class="input-group">
            <input type="text"
                   id="symbols"
                   name="StockSymbolsInput"
                   value="@Model.StockSymbolsInput"
                   class="form-control"
                   aria-label="Stock symbols input"
                   aria-describedby="getQuotesButton"
                   autocomplete="off" />
            <button type="submit"
                    id="getQuotesButton"
                    class="btn btn-primary"
                    aria-label="Get stock quotes">
                Get Quotes
            </button>
        </div>
        <input type="hidden" id="refreshIntervalSeconds" name="RefreshIntervalSeconds" value="0" />
    </div>
</form>

@if (Model.StockTickers.Any())
{
    <div class="d-flex justify-content-between align-items-center mt-2">
        <h3 id="stocksSection" class="mt-4">Stocks</h3>

        <div class="d-flex align-items-center form-group" role="group" aria-labelledby="refreshIntervalLabel">
            <label id="refreshIntervalLabel"
                   for="refreshIntervalDropdown"
                   class="mb-0 me-2 text-nowrap small">
                Refresh every:
            </label>
            <select id="refreshIntervalDropdown"
                    name="refreshIntervalDropdown"
                    class="form-control"
                    onchange="setRefreshIntervalSeconds()"
                    aria-label="Select refresh interval">
                <option value="0" selected="@((Model.RefreshIntervalSeconds == 0) ? "selected" : null)">Off</option>
                <option value="5" selected="@((Model.RefreshIntervalSeconds == 5) ? "selected" : null)">5 sec</option>
                <option value="10" selected="@((Model.RefreshIntervalSeconds == 10) ? "selected" : null)">10 sec</option>
                <option value="30" selected="@((Model.RefreshIntervalSeconds == 30) ? "selected" : null)">30 sec</option>
                <option value="60" selected="@((Model.RefreshIntervalSeconds == 60) ? "selected" : null)">60 sec</option>
            </select>
        </div>
    </div>

    <table class="table table-striped table-bordered mt-2"
           role="grid"
           aria-labelledby="stocksSection"
           aria-describedby="pageTitle">
        <thead>
            <tr>
                <th scope="col">Symbol</th>
                <th scope="col">Company</th>
                <th scope="col">Price</th>
                <th scope="col">P/E Ratio</th>
                <th scope="col">EPS</th>
                <th scope="col" style="width: 150px; white-space: nowrap;">Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ticker in Model.StockTickers)
            {
                <tr tabindex="0" role="row" aria-label="Stock @ticker.Symbol, @ticker.CompanyName">
                    <td role="gridcell">@ticker.Symbol</td>
                    <td role="gridcell">@ticker.CompanyName</td>
                    <td role="gridcell">@ticker.Price.ToString("C2")</td>
                    <td role="gridcell">@ticker.PriceToEarningsRatio.ToString("F2")</td>
                    <td role="gridcell">@ticker.EarningsPerShare.ToString("F2")</td>
                    <td role="gridcell">
                        @if (ticker.UpdatedStatusCode == "200")
                        {
                            <span class="badge rounded-pill bg-success"
                                  aria-label="Status new">New</span>
                        }
                        @if ((!ticker.CreatedUtc.Equals(ticker.UpdatedUtc)) && ticker.CreatedStatusCode != ticker.UpdatedStatusCode)
                        {
                            <span class="badge rounded-pill bg-secondary"
                                  aria-label="Status old">Old</span>
                        }
                        @if (ticker.UpdatedStatusCode != "200" && ticker.UpdatedStatusCode != "429")
                        {
                            <span class="badge rounded-pill bg-danger"
                                  aria-label="Status error">Error</span>
                        }
                        @if (ticker.UpdatedStatusCode == "429")
                        {
                            <span class="badge rounded-pill text-dark bg-warning"
                                  aria-label="Status rate limited">Rate limit</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@section Scripts {
    <script>
        let refreshTimer = null;

        function setRefreshIntervalSeconds() {
            const dropdown = document.getElementById("refreshIntervalDropdown");
            const refreshSeconds = parseInt(dropdown.value);
            const timerInterval = refreshSeconds * 1000;

            const refreshIntervalSeconds = document.getElementById("refreshIntervalSeconds");
            refreshIntervalSeconds.value = refreshSeconds;

            if (refreshTimer) {
                clearInterval(refreshTimer);
                refreshTimer = null;
            }

            if (timerInterval > 0) {
                refreshTimer = setInterval(() => {
                    document.getElementById("quotesForm").submit();
                }, timerInterval);
            }
        }

        // Initialize auto-refresh on page load (preserves setting after postback)
        document.addEventListener("DOMContentLoaded", () => {
            setRefreshIntervalSeconds();
        });
    </script>
}